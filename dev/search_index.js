var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [MRCFile]\nPrivate = false\nOrder = [:type, :function]","category":"page"},{"location":"api/#MRCFile.MRCData","page":"API","title":"MRCFile.MRCData","text":"MRCData{T<:Number,N,EH<:MRCExtendedHeader,D<:AbstractArray{T,N}} <: AbstractArray{T,N}\n\nContainer for electron density data loaded from an MRC file.\n\nEach instance of MRCData carries with it a header and extended header, respectively accessed with header and extendedheader.\n\nIf changes are made to the header, extended header, or the data, call updateheader! before writing to file to ensure the header is stil consistent with the data.\n\nMRCData()\n\nCreate an empty array.\n\nMRCData(header[, extendedheader])\n\nCreate an array whose size is indicated by the entries in header.\n\nMRCData(size)\nMRCData(size...)\n\nCreate an array of the specified size.\n\n\n\n\n\n","category":"type"},{"location":"api/#MRCFile.MRCExtendedHeader","page":"API","title":"MRCFile.MRCExtendedHeader","text":"MRCExtendedHeader{T}\n\nExtended header of an MRC file.\n\nMRCExtendedHeader(data)\n\nStore data in an extended header. data must be directly writeable to a file with write(::IO, data).\n\nMRCExtendedHeader()\n\nCreate an extended header whose data is an empty Vector{UInt8}.\n\n\n\n\n\n","category":"type"},{"location":"api/#MRCFile.MRCHeader","page":"API","title":"MRCFile.MRCHeader","text":"MRCHeader\n\nAn MRC header.\n\nMRCHeader()\nMRCHeader(; kwargs...)\n\nConstruct a header with suitable defaults, optionally substituting any provided entries.\n\nSee the MRC2014 format spec for a description of the header fields.\n\n\n\n\n\n","category":"type"},{"location":"api/#MRCFile.cellangles!-Tuple{MRCHeader, Any}","page":"API","title":"MRCFile.cellangles!","text":"cellangles!(h::MRCHeader, (α, β, γ))\n\nSet cell angles in degrees.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.cellangles-Tuple{MRCHeader}","page":"API","title":"MRCFile.cellangles","text":"cellangles(h::MRCHeader) -> (α, β, γ)\n\nGet cell angles in degrees.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.cellsize!-Tuple{MRCHeader, Any}","page":"API","title":"MRCFile.cellsize!","text":"cellsize!(h::MRCHeader, (x, y, z))\n\nSet cell dimensions in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.cellsize-Tuple{MRCHeader}","page":"API","title":"MRCFile.cellsize","text":"cellsize(h::MRCHeader) -> (x, y, z)\n\nGet cell dimensions in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.eachmapcol-Tuple{MRCData}","page":"API","title":"MRCFile.eachmapcol","text":"eachmapcol(d::MRCData)\n\nReturn an iterator over columns.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.eachmaprow-Tuple{MRCData}","page":"API","title":"MRCFile.eachmaprow","text":"eachmaprow(d::MRCData)\n\nReturn an iterator over map rows.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.eachmapsection-Tuple{MRCData}","page":"API","title":"MRCFile.eachmapsection","text":"eachmapsection(d::MRCData)\n\nReturn an iterator over sections.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.eachstackunit-Tuple{MRCData}","page":"API","title":"MRCFile.eachstackunit","text":"eachstackunit(d::MRCData)\n\nReturn an iterator over elements of stacks.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.extendedheader-Tuple{MRCData}","page":"API","title":"MRCFile.extendedheader","text":"extendedheader(data::MRCData) -> MRCExtendedHeader\n\nGet extended header.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.gridsize!-Tuple{MRCHeader, Any}","page":"API","title":"MRCFile.gridsize!","text":"gridsize!(h::MRCHeader, (x, y, z))\n\nSet size of sampling grid in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.gridsize-Tuple{MRCHeader}","page":"API","title":"MRCFile.gridsize","text":"gridsize(h::MRCHeader) -> (x, y, z)\n\nGet size of sampling grid in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.header-Tuple{MRCData}","page":"API","title":"MRCFile.header","text":"header(data::MRCData) -> MRCHeader\n\nGet header.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.origin!-Tuple{MRCHeader, Any}","page":"API","title":"MRCFile.origin!","text":"origin!(h::MRCHeader, (x, y, z))\n\nSet phase origin in pixels or origin of subvolume in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.origin-Tuple{MRCHeader}","page":"API","title":"MRCFile.origin","text":"origin(h::MRCHeader) -> (x, y, z)\n\nGet phase origin in pixels or origin of subvolume in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.read_mmap-Tuple{IO, Type{MRCData}}","page":"API","title":"MRCFile.read_mmap","text":"read_mmap(io::IO, ::Type{MRCData})\nread_mmap(path::AbstractString, ::Type{MRCData})\n\nRead MRC file or stream, using a memory-mapped array to access the data.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.start!-Tuple{MRCHeader, Any}","page":"API","title":"MRCFile.start!","text":"start!(h::MRCHeader, (nx, ny, nz))\n\nSet location of first column, first row, and first section in unit cell.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.start-Tuple{MRCHeader}","page":"API","title":"MRCFile.start","text":"start(h::MRCHeader) -> (nx, ny, nz)\n\nGet location of first column, first row, and first section in unit cell.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.updateheader!-Tuple{MRCData}","page":"API","title":"MRCFile.updateheader!","text":"updateheader!(data::MRCData; statistics = true)\n\nUpdate the header stored in data from the data and its extended header. Set statistics=false to avoid computing summary statistics from the data.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.voxelaxes-Tuple{MRCHeader, Any}","page":"API","title":"MRCFile.voxelaxes","text":"voxelaxes(h::MRCHeader, i) -> StepRangeLen\nvoxelaxes(h::MRCHeader) -> NTuple{3,StepRangeLen}\n\nGet range of voxel positions along axis i or all axes.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.voxelsize!-Tuple{MRCHeader, Any, Any}","page":"API","title":"MRCFile.voxelsize!","text":"voxelsize!(h::MRCHeader, s, i)\nvoxelsize!(h::MRCHeaders, (x, y, z))\n\nSet size of dimension i of voxel in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"api/#MRCFile.voxelsize-Tuple{MRCHeader, Any}","page":"API","title":"MRCFile.voxelsize","text":"voxelsize(h::MRCHeader, i)\nvoxelsize(h::MRCHeader)\n\nGet size of dimension i of voxel in angstroms.\n\n\n\n\n\n","category":"method"},{"location":"#MRCFile-1","page":"Home","title":"MRCFile","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"MRCFile.jl implements the MRC2014 format for storing image and volume data such as those produced by electron microscopy. It offers the ability to read, edit, and write MRC files, as well as utility functions for extracting useful information from the headers.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The key type is MRCData, which contains the contents of the MRC file, accessible with header and extendedheader. MRCData is an AbstractArray whose elements are those of the data portion of the file and can be accessed or modified accordingly.","category":"page"}]
}
